name: Dependencies Update

# 每周一自动检查依赖更新
on:
  schedule:
    - cron: '0 9 * * MON'  # 每周一上午9点
  workflow_dispatch:  # 手动触发

env:
  CARGO_TERM_COLOR: always

jobs:
  # 检查过时的依赖
  check-outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-outdated
        uses: taiki-e/install-action@cargo-outdated
      
      - name: Check for outdated dependencies
        run: |
          echo "## 📦 Dependency Status Report" >> /tmp/outdated-report.md
          echo "" >> /tmp/outdated-report.md
          echo "Generated on: $(date)" >> /tmp/outdated-report.md
          echo "" >> /tmp/outdated-report.md
          
          if cargo outdated --exit-code 1; then
            echo "✅ All dependencies are up to date!" >> /tmp/outdated-report.md
          else
            echo "⚠️ Some dependencies are outdated:" >> /tmp/outdated-report.md
            echo "" >> /tmp/outdated-report.md
            echo '```' >> /tmp/outdated-report.md
            cargo outdated >> /tmp/outdated-report.md
            echo '```' >> /tmp/outdated-report.md
          fi
      
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: /tmp/outdated-report.md

  # 自动更新补丁版本
  auto-update-patch:
    name: Auto Update Patch Versions
    runs-on: ubuntu-latest
    needs: check-outdated
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-edit
        uses: taiki-e/install-action@cargo-edit
      
      - name: Update patch versions
        run: |
          # 只更新补丁版本（安全更新）
          cargo update
          
          # 检查是否有变更
          if git diff --quiet Cargo.lock; then
            echo "No patch updates available"
            echo "has_updates=false" >> $GITHUB_ENV
          else
            echo "Patch updates found"
            echo "has_updates=true" >> $GITHUB_ENV
          fi
      
      - name: Run tests after update
        if: env.has_updates == 'true'
        run: |
          cargo test --all-features
          cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Create Pull Request
        if: env.has_updates == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "⬆️ Update dependencies (patch versions)"
          title: "⬆️ Automated dependency updates (patch versions)"
          body: |
            ## 🤖 Automated Dependency Updates
            
            This PR contains automated updates to patch versions of dependencies.
            
            ### Changes
            - Updated `Cargo.lock` with latest patch versions
            - All tests pass ✅
            - Clippy checks pass ✅
            
            ### Safety
            - Only patch version updates (no breaking changes expected)
            - Automated testing ensures compatibility
            
            **Note**: This PR was automatically created by GitHub Actions.
          branch: automated/dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated

  # 安全审计
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit
      
      - name: Run security audit
        run: |
          echo "## 🔒 Security Audit Report" > /tmp/audit-report.md
          echo "" >> /tmp/audit-report.md
          echo "Generated on: $(date)" >> /tmp/audit-report.md
          echo "" >> /tmp/audit-report.md
          
          if cargo audit --format json > /tmp/audit.json; then
            echo "✅ No security vulnerabilities found!" >> /tmp/audit-report.md
          else
            echo "⚠️ Security vulnerabilities detected:" >> /tmp/audit-report.md
            echo "" >> /tmp/audit-report.md
            echo '```json' >> /tmp/audit-report.md
            cat /tmp/audit.json >> /tmp/audit-report.md
            echo '```' >> /tmp/audit-report.md
            
            # 创建Issue报告安全问题
            echo "SECURITY_ISSUE=true" >> $GITHUB_ENV
          fi
      
      - name: Create security issue
        if: env.SECURITY_ISSUE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditReport = fs.readFileSync('/tmp/audit-report.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Vulnerabilities Detected',
              body: auditReport,
              labels: ['security', 'high-priority']
            });
      
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: /tmp/audit-report.md

  # 许可证检查
  license-check:
    name: License Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-license
        run: cargo install cargo-license
      
      - name: Check licenses
        run: |
          echo "## 📄 License Compatibility Report" > /tmp/license-report.md
          echo "" >> /tmp/license-report.md
          echo "Generated on: $(date)" >> /tmp/license-report.md
          echo "" >> /tmp/license-report.md
          echo "### Dependencies and their licenses:" >> /tmp/license-report.md
          echo "" >> /tmp/license-report.md
          echo '```' >> /tmp/license-report.md
          cargo license >> /tmp/license-report.md
          echo '```' >> /tmp/license-report.md
          
          # 检查是否有不兼容的许可证
          if cargo license | grep -E "GPL|AGPL|LGPL" > /dev/null; then
            echo "" >> /tmp/license-report.md
            echo "⚠️ **Warning**: Found potentially incompatible licenses (GPL family)" >> /tmp/license-report.md
            echo "Please review the compatibility with MIT/Apache-2.0 dual license." >> /tmp/license-report.md
          else
            echo "" >> /tmp/license-report.md
            echo "✅ All dependency licenses appear compatible with MIT/Apache-2.0" >> /tmp/license-report.md
          fi
      
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: /tmp/license-report.md